//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef LIBRARYMODEL_ECOREPLUGIN_HPP
#define LIBRARYMODEL_ECOREPLUGIN_HPP

// namespace macro header include
#include "libraryModel_ecore/libraryModel_ecore.hpp"

#include "ecore/EcoreModelPlugin.hpp"

namespace libraryModel_ecore
{
	class LIBRARYMODEL_ECORE_API libraryModel_ecorePlugin : virtual public EcoreModelPlugin
	{
		public:
			static std::shared_ptr<MDE4CPPPlugin> eInstance();
	
			virtual std::string eclipseURI() = 0;
			virtual std::string eNAME() = 0;
			virtual std::string eNS_URI() = 0;
			virtual std::string eNS_PREFIX() = 0;
			
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EFactory> getEFactory() = 0;
			virtual std::shared_ptr<ecore::EPackage> getEPackage() = 0;
	
		protected:
			libraryModel_ecorePlugin(){};
			virtual ~libraryModel_ecorePlugin(){};
	
		private:
			static std::shared_ptr<MDE4CPPPlugin> instance;
	};
}
#endif /* end of include guard: LIBRARYMODEL_ECOREPLUGIN_HPP */
