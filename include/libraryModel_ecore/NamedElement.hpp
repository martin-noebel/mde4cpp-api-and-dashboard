//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef LIBRARYMODEL_ECORE_NAMEDELEMENT_HPP
#define LIBRARYMODEL_ECORE_NAMEDELEMENT_HPP


#include <memory>
#include <string>
// forward declarations


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace libraryModel_ecore
{
	class libraryModel_ecoreFactory;
}

//Forward Declaration for used types 

// namespace macro header include
#include "libraryModel_ecore/libraryModel_ecore.hpp"



#include "ecore/EModelElement.hpp"


//*********************************
namespace libraryModel_ecore 
{
	
	class LIBRARYMODEL_ECORE_API NamedElement : virtual public ecore::EModelElement
	{
		public:
 			NamedElement(const NamedElement &) {}

		protected:
			NamedElement(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~NamedElement() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			virtual std::string getName() const = 0;
			virtual void setName (std::string _Name)= 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			std::string m_Name= "";
			
			//*********************************
			// Reference Members
			//*********************************
	};
}
#endif /* end of include guard: LIBRARYMODEL_ECORE_NAMEDELEMENT_HPP */
