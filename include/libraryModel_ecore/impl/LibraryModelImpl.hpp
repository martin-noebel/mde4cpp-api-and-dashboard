//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef LIBRARYMODEL_ECORE_LIBRARYMODELLIBRARYMODELIMPL_HPP
#define LIBRARYMODEL_ECORE_LIBRARYMODELLIBRARYMODELIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "libraryModel_ecore/libraryModel_ecore.hpp" 

// model includes
#include "../LibraryModel.hpp"


#include "ecore/impl/EModelElementImpl.hpp"

//*********************************
namespace libraryModel_ecore 
{
	class LIBRARYMODEL_ECORE_API LibraryModelImpl : virtual public ecore::EModelElementImpl,
virtual public LibraryModel 
	{
		public: 
			LibraryModelImpl(const LibraryModelImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			LibraryModelImpl& operator=(LibraryModelImpl const&); 

		protected:
			friend class libraryModel_ecoreFactoryImpl;
			LibraryModelImpl();
			virtual std::shared_ptr<libraryModel_ecore::LibraryModel> getThisLibraryModelPtr() const;
			virtual void setThisLibraryModelPtr(std::weak_ptr<libraryModel_ecore::LibraryModel> thisLibraryModelPtr);


		public:
			//destructor
			virtual ~LibraryModelImpl();
			
			//*********************************
			// Operations
			//*********************************
			virtual void printLibrary() ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::shared_ptr<Bag<libraryModel_ecore::Author>> getAuthors() const ;
			virtual std::shared_ptr<Bag<libraryModel_ecore::Book>> getBook() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, Any newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual Any eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments) ;

		private:
			std::weak_ptr<libraryModel_ecore::LibraryModel> m_thisLibraryModelPtr;
	};
}
#endif /* end of include guard: LIBRARYMODEL_ECORE_LIBRARYMODELLIBRARYMODELIMPL_HPP */
