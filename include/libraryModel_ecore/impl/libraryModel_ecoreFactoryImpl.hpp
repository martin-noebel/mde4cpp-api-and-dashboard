//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef LIBRARYMODEL_ECOREFACTORYIMPL_HPP
#define LIBRARYMODEL_ECOREFACTORYIMPL_HPP

// namespace macro header include
#include "libraryModel_ecore/libraryModel_ecore.hpp"

#include "ecore/impl/EFactoryImpl.hpp"

#include "libraryModel_ecore/libraryModel_ecoreFactory.hpp"

namespace libraryModel_ecore 
{	class Author;
	class Book;
	class LibraryModel;
	class NamedElement;
	class Picture;
}

namespace libraryModel_ecore 
{
	class LIBRARYMODEL_ECORE_API libraryModel_ecoreFactoryImpl : virtual public ecore::EFactoryImpl , virtual public libraryModel_ecoreFactory 
	{
		private:    
			libraryModel_ecoreFactoryImpl(libraryModel_ecoreFactoryImpl const&) = delete;
			libraryModel_ecoreFactoryImpl& operator=(libraryModel_ecoreFactoryImpl const&) = delete;

		protected:
			friend class libraryModel_ecoreFactory;
			// Constructor
			libraryModel_ecoreFactoryImpl();

		public:
			virtual ~libraryModel_ecoreFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const;

			//Creator functions
			 virtual std::shared_ptr<Author> createAuthor(const int metaElementID = libraryModel_ecorePackage::AUTHOR_CLASS) const ;
			 //Add as contained object
			 virtual std::shared_ptr<Author> createAuthor_as_authors_in_LibraryModel(std::weak_ptr<libraryModel_ecore::LibraryModel> par_LibraryModel, const int metaElementID = libraryModel_ecorePackage::AUTHOR_CLASS) const ;
			 virtual std::shared_ptr<Book> createBook(const int metaElementID = libraryModel_ecorePackage::BOOK_CLASS) const ;
			 //Add as contained object
			 virtual std::shared_ptr<Book> createBook_as_book_in_LibraryModel(std::weak_ptr<libraryModel_ecore::LibraryModel> par_LibraryModel, const int metaElementID = libraryModel_ecorePackage::BOOK_CLASS) const ;
			 virtual std::shared_ptr<LibraryModel> createLibraryModel(const int metaElementID = libraryModel_ecorePackage::LIBRARYMODEL_CLASS) const ;
			 virtual std::shared_ptr<NamedElement> createNamedElement(const int metaElementID = libraryModel_ecorePackage::NAMEDELEMENT_CLASS) const ;
			 virtual std::shared_ptr<Picture> createPicture(const int metaElementID = libraryModel_ecorePackage::PICTURE_CLASS) const ;
			 //Add as contained object
			 virtual std::shared_ptr<Picture> createPicture_as_pictures_in_Book(std::weak_ptr<libraryModel_ecore::Book> par_Book, const int metaElementID = libraryModel_ecorePackage::PICTURE_CLASS) const ;
			 

		private:
			static libraryModel_ecoreFactory* create();
            std::map<std::string,int> m_idMap;
	};
}
#endif /* end of include guard: LIBRARYMODEL_ECOREFACTORYIMPL_HPP */
