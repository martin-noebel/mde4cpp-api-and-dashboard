//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef LIBRARYMODEL_ECORE_BOOKBOOKIMPL_HPP
#define LIBRARYMODEL_ECORE_BOOKBOOKIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "libraryModel_ecore/libraryModel_ecore.hpp" 

// model includes
#include "../Book.hpp"

#include "libraryModel_ecore/impl/NamedElementImpl.hpp"

//*********************************
namespace libraryModel_ecore 
{
	class LIBRARYMODEL_ECORE_API BookImpl : virtual public NamedElementImpl, virtual public Book 
	{
		public: 
			BookImpl(const BookImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			BookImpl& operator=(BookImpl const&); 

		protected:
			friend class libraryModel_ecoreFactoryImpl;
			BookImpl();
			virtual std::shared_ptr<libraryModel_ecore::Book> getThisBookPtr() const;
			virtual void setThisBookPtr(std::weak_ptr<libraryModel_ecore::Book> thisBookPtr);

			//Additional constructors for the containments back reference
			BookImpl(std::weak_ptr<libraryModel_ecore::LibraryModel> par_library);

		public:
			//destructor
			virtual ~BookImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::shared_ptr<Bag<libraryModel_ecore::Author>> getAuthors() const ;
			virtual std::weak_ptr<libraryModel_ecore::LibraryModel> getLibrary() const ;
			virtual void setLibrary(std::weak_ptr<libraryModel_ecore::LibraryModel>) ;
			virtual std::shared_ptr<Bag<libraryModel_ecore::Picture>> getPictures() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<libraryModel_ecore::Book> m_thisBookPtr;
	};
}
#endif /* end of include guard: LIBRARYMODEL_ECORE_BOOKBOOKIMPL_HPP */
